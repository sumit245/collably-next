##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	listen 443 ssl default_server;
	listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;
	
	client_max_body_size 50M;  # Allow up to 50MB uploads


	location / {
		 proxy_pass http://localhost:3000/;  # Node.js app
		 proxy_http_version 1.1;
		 proxy_set_header Upgrade $http_upgrade;
		 proxy_set_header Connection 'upgrade';
		 proxy_set_header Host $host;
		 proxy_cache_bypass $http_upgrade;
	}
	location /api {
		 proxy_pass http://localhost:5000/api;
		 proxy_http_version 1.1;
		 proxy_set_header Upgrade $http_upgrade;
		 proxy_set_header Connection 'upgrade';
		 proxy_set_header Host $host;
		 proxy_cache_bypass $http_upgrade;
	}
location ~ ^/[^/]+/[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]$ {
    proxy_pass http://localhost:5000;  # send to backend
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
}
	
location /admin/panel {
		try_files $uri $uri/ /var/www/html/index.nginx-debian.html;
	}

}

server {

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;
    	server_name collably.in; # managed by Certbot
	
	client_max_body_size 50M;  # Allow up to 50MB uploads


	location / {
		 proxy_pass http://localhost:3000/;  # Node.js app
		 proxy_http_version 1.1;
		 proxy_set_header Upgrade $http_upgrade;
		 proxy_set_header Connection 'upgrade';
		 proxy_set_header Host $host;
		 proxy_cache_bypass $http_upgrade;
	}
	location /api {
		 proxy_pass http://localhost:5000/api;
		 proxy_http_version 1.1;
		 proxy_set_header Upgrade $http_upgrade;
		 proxy_set_header Connection 'upgrade';
		 proxy_set_header Host $host;
		 proxy_cache_bypass $http_upgrade;
	}

location ~ ^/[^/]+/[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]$ {
    proxy_pass http://localhost:5000;  # send to backend
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
}

	location /admin/panel {
		try_files $uri $uri/ /var/www/html/index.nginx-debian.html;
	}



    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/newapp.collably.in/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/newapp.collably.in/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {
    if ($host = collably.in) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	listen 80 ;
	listen [::]:80 ;
    server_name collably.in;
    return 404; # managed by Certbot


}
